/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package in.dreamlab.MultiThreadedPartitioning.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-13")
public class MultiThreadedWorkerService {

  public interface Iface {

    public void edgeReceiver(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor) throws org.apache.thrift.TException;

    public void singleEdgeReceiver(MessageType messageType, long v1, long v2, byte edgeColor) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.nio.ByteBuffer> specialVertices(MessageType messageType, int avgDegree, long v1, long v2) throws org.apache.thrift.TException;

    public void cleanRedVertices() throws org.apache.thrift.TException;

    public void writeEdgeToFile() throws org.apache.thrift.TException;

    public void closeConnection(MessageType messageType) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void edgeReceiver(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void singleEdgeReceiver(MessageType messageType, long v1, long v2, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void specialVertices(MessageType messageType, int avgDegree, long v1, long v2, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException;

    public void cleanRedVertices(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void writeEdgeToFile(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void closeConnection(MessageType messageType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void edgeReceiver(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor) throws org.apache.thrift.TException
    {
      send_edgeReceiver(messageType, edge, edgeColor);
      recv_edgeReceiver();
    }

    public void send_edgeReceiver(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor) throws org.apache.thrift.TException
    {
      edgeReceiver_args args = new edgeReceiver_args();
      args.setMessageType(messageType);
      args.setEdge(edge);
      args.setEdgeColor(edgeColor);
      sendBase("edgeReceiver", args);
    }

    public void recv_edgeReceiver() throws org.apache.thrift.TException
    {
      edgeReceiver_result result = new edgeReceiver_result();
      receiveBase(result, "edgeReceiver");
      return;
    }

    public void singleEdgeReceiver(MessageType messageType, long v1, long v2, byte edgeColor) throws org.apache.thrift.TException
    {
      send_singleEdgeReceiver(messageType, v1, v2, edgeColor);
    }

    public void send_singleEdgeReceiver(MessageType messageType, long v1, long v2, byte edgeColor) throws org.apache.thrift.TException
    {
      singleEdgeReceiver_args args = new singleEdgeReceiver_args();
      args.setMessageType(messageType);
      args.setV1(v1);
      args.setV2(v2);
      args.setEdgeColor(edgeColor);
      sendBaseOneway("singleEdgeReceiver", args);
    }

    public java.util.Map<java.lang.String,java.nio.ByteBuffer> specialVertices(MessageType messageType, int avgDegree, long v1, long v2) throws org.apache.thrift.TException
    {
      send_specialVertices(messageType, avgDegree, v1, v2);
      return recv_specialVertices();
    }

    public void send_specialVertices(MessageType messageType, int avgDegree, long v1, long v2) throws org.apache.thrift.TException
    {
      specialVertices_args args = new specialVertices_args();
      args.setMessageType(messageType);
      args.setAvgDegree(avgDegree);
      args.setV1(v1);
      args.setV2(v2);
      sendBase("specialVertices", args);
    }

    public java.util.Map<java.lang.String,java.nio.ByteBuffer> recv_specialVertices() throws org.apache.thrift.TException
    {
      specialVertices_result result = new specialVertices_result();
      receiveBase(result, "specialVertices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "specialVertices failed: unknown result");
    }

    public void cleanRedVertices() throws org.apache.thrift.TException
    {
      send_cleanRedVertices();
      recv_cleanRedVertices();
    }

    public void send_cleanRedVertices() throws org.apache.thrift.TException
    {
      cleanRedVertices_args args = new cleanRedVertices_args();
      sendBase("cleanRedVertices", args);
    }

    public void recv_cleanRedVertices() throws org.apache.thrift.TException
    {
      cleanRedVertices_result result = new cleanRedVertices_result();
      receiveBase(result, "cleanRedVertices");
      return;
    }

    public void writeEdgeToFile() throws org.apache.thrift.TException
    {
      send_writeEdgeToFile();
      recv_writeEdgeToFile();
    }

    public void send_writeEdgeToFile() throws org.apache.thrift.TException
    {
      writeEdgeToFile_args args = new writeEdgeToFile_args();
      sendBase("writeEdgeToFile", args);
    }

    public void recv_writeEdgeToFile() throws org.apache.thrift.TException
    {
      writeEdgeToFile_result result = new writeEdgeToFile_result();
      receiveBase(result, "writeEdgeToFile");
      return;
    }

    public void closeConnection(MessageType messageType) throws org.apache.thrift.TException
    {
      send_closeConnection(messageType);
      recv_closeConnection();
    }

    public void send_closeConnection(MessageType messageType) throws org.apache.thrift.TException
    {
      closeConnection_args args = new closeConnection_args();
      args.setMessageType(messageType);
      sendBase("closeConnection", args);
    }

    public void recv_closeConnection() throws org.apache.thrift.TException
    {
      closeConnection_result result = new closeConnection_result();
      receiveBase(result, "closeConnection");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void edgeReceiver(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      edgeReceiver_call method_call = new edgeReceiver_call(messageType, edge, edgeColor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class edgeReceiver_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private MessageType messageType;
      private java.util.List<java.lang.String> edge;
      private byte edgeColor;
      public edgeReceiver_call(MessageType messageType, java.util.List<java.lang.String> edge, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageType = messageType;
        this.edge = edge;
        this.edgeColor = edgeColor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("edgeReceiver", org.apache.thrift.protocol.TMessageType.CALL, 0));
        edgeReceiver_args args = new edgeReceiver_args();
        args.setMessageType(messageType);
        args.setEdge(edge);
        args.setEdgeColor(edgeColor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void singleEdgeReceiver(MessageType messageType, long v1, long v2, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      singleEdgeReceiver_call method_call = new singleEdgeReceiver_call(messageType, v1, v2, edgeColor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class singleEdgeReceiver_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private MessageType messageType;
      private long v1;
      private long v2;
      private byte edgeColor;
      public singleEdgeReceiver_call(MessageType messageType, long v1, long v2, byte edgeColor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.messageType = messageType;
        this.v1 = v1;
        this.v2 = v2;
        this.edgeColor = edgeColor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("singleEdgeReceiver", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        singleEdgeReceiver_args args = new singleEdgeReceiver_args();
        args.setMessageType(messageType);
        args.setV1(v1);
        args.setV2(v2);
        args.setEdgeColor(edgeColor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void specialVertices(MessageType messageType, int avgDegree, long v1, long v2, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      specialVertices_call method_call = new specialVertices_call(messageType, avgDegree, v1, v2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class specialVertices_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.nio.ByteBuffer>> {
      private MessageType messageType;
      private int avgDegree;
      private long v1;
      private long v2;
      public specialVertices_call(MessageType messageType, int avgDegree, long v1, long v2, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageType = messageType;
        this.avgDegree = avgDegree;
        this.v1 = v1;
        this.v2 = v2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("specialVertices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        specialVertices_args args = new specialVertices_args();
        args.setMessageType(messageType);
        args.setAvgDegree(avgDegree);
        args.setV1(v1);
        args.setV2(v2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.nio.ByteBuffer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_specialVertices();
      }
    }

    public void cleanRedVertices(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cleanRedVertices_call method_call = new cleanRedVertices_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cleanRedVertices_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public cleanRedVertices_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cleanRedVertices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cleanRedVertices_args args = new cleanRedVertices_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void writeEdgeToFile(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeEdgeToFile_call method_call = new writeEdgeToFile_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeEdgeToFile_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public writeEdgeToFile_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeEdgeToFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeEdgeToFile_args args = new writeEdgeToFile_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void closeConnection(MessageType messageType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeConnection_call method_call = new closeConnection_call(messageType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeConnection_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private MessageType messageType;
      public closeConnection_call(MessageType messageType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageType = messageType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeConnection_args args = new closeConnection_args();
        args.setMessageType(messageType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("edgeReceiver", new edgeReceiver());
      processMap.put("singleEdgeReceiver", new singleEdgeReceiver());
      processMap.put("specialVertices", new specialVertices());
      processMap.put("cleanRedVertices", new cleanRedVertices());
      processMap.put("writeEdgeToFile", new writeEdgeToFile());
      processMap.put("closeConnection", new closeConnection());
      return processMap;
    }

    public static class edgeReceiver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, edgeReceiver_args> {
      public edgeReceiver() {
        super("edgeReceiver");
      }

      public edgeReceiver_args getEmptyArgsInstance() {
        return new edgeReceiver_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public edgeReceiver_result getResult(I iface, edgeReceiver_args args) throws org.apache.thrift.TException {
        edgeReceiver_result result = new edgeReceiver_result();
        iface.edgeReceiver(args.messageType, args.edge, args.edgeColor);
        return result;
      }
    }

    public static class singleEdgeReceiver<I extends Iface> extends org.apache.thrift.ProcessFunction<I, singleEdgeReceiver_args> {
      public singleEdgeReceiver() {
        super("singleEdgeReceiver");
      }

      public singleEdgeReceiver_args getEmptyArgsInstance() {
        return new singleEdgeReceiver_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, singleEdgeReceiver_args args) throws org.apache.thrift.TException {
        iface.singleEdgeReceiver(args.messageType, args.v1, args.v2, args.edgeColor);
        return null;
      }
    }

    public static class specialVertices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, specialVertices_args> {
      public specialVertices() {
        super("specialVertices");
      }

      public specialVertices_args getEmptyArgsInstance() {
        return new specialVertices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public specialVertices_result getResult(I iface, specialVertices_args args) throws org.apache.thrift.TException {
        specialVertices_result result = new specialVertices_result();
        result.success = iface.specialVertices(args.messageType, args.avgDegree, args.v1, args.v2);
        return result;
      }
    }

    public static class cleanRedVertices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cleanRedVertices_args> {
      public cleanRedVertices() {
        super("cleanRedVertices");
      }

      public cleanRedVertices_args getEmptyArgsInstance() {
        return new cleanRedVertices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cleanRedVertices_result getResult(I iface, cleanRedVertices_args args) throws org.apache.thrift.TException {
        cleanRedVertices_result result = new cleanRedVertices_result();
        iface.cleanRedVertices();
        return result;
      }
    }

    public static class writeEdgeToFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeEdgeToFile_args> {
      public writeEdgeToFile() {
        super("writeEdgeToFile");
      }

      public writeEdgeToFile_args getEmptyArgsInstance() {
        return new writeEdgeToFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public writeEdgeToFile_result getResult(I iface, writeEdgeToFile_args args) throws org.apache.thrift.TException {
        writeEdgeToFile_result result = new writeEdgeToFile_result();
        iface.writeEdgeToFile();
        return result;
      }
    }

    public static class closeConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeConnection_args> {
      public closeConnection() {
        super("closeConnection");
      }

      public closeConnection_args getEmptyArgsInstance() {
        return new closeConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public closeConnection_result getResult(I iface, closeConnection_args args) throws org.apache.thrift.TException {
        closeConnection_result result = new closeConnection_result();
        iface.closeConnection(args.messageType);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("edgeReceiver", new edgeReceiver());
      processMap.put("singleEdgeReceiver", new singleEdgeReceiver());
      processMap.put("specialVertices", new specialVertices());
      processMap.put("cleanRedVertices", new cleanRedVertices());
      processMap.put("writeEdgeToFile", new writeEdgeToFile());
      processMap.put("closeConnection", new closeConnection());
      return processMap;
    }

    public static class edgeReceiver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, edgeReceiver_args, Void> {
      public edgeReceiver() {
        super("edgeReceiver");
      }

      public edgeReceiver_args getEmptyArgsInstance() {
        return new edgeReceiver_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            edgeReceiver_result result = new edgeReceiver_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            edgeReceiver_result result = new edgeReceiver_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, edgeReceiver_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.edgeReceiver(args.messageType, args.edge, args.edgeColor,resultHandler);
      }
    }

    public static class singleEdgeReceiver<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, singleEdgeReceiver_args, Void> {
      public singleEdgeReceiver() {
        super("singleEdgeReceiver");
      }

      public singleEdgeReceiver_args getEmptyArgsInstance() {
        return new singleEdgeReceiver_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, singleEdgeReceiver_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.singleEdgeReceiver(args.messageType, args.v1, args.v2, args.edgeColor,resultHandler);
      }
    }

    public static class specialVertices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, specialVertices_args, java.util.Map<java.lang.String,java.nio.ByteBuffer>> {
      public specialVertices() {
        super("specialVertices");
      }

      public specialVertices_args getEmptyArgsInstance() {
        return new specialVertices_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>>() {
          public void onComplete(java.util.Map<java.lang.String,java.nio.ByteBuffer> o) {
            specialVertices_result result = new specialVertices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            specialVertices_result result = new specialVertices_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, specialVertices_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.nio.ByteBuffer>> resultHandler) throws org.apache.thrift.TException {
        iface.specialVertices(args.messageType, args.avgDegree, args.v1, args.v2,resultHandler);
      }
    }

    public static class cleanRedVertices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cleanRedVertices_args, Void> {
      public cleanRedVertices() {
        super("cleanRedVertices");
      }

      public cleanRedVertices_args getEmptyArgsInstance() {
        return new cleanRedVertices_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            cleanRedVertices_result result = new cleanRedVertices_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cleanRedVertices_result result = new cleanRedVertices_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cleanRedVertices_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.cleanRedVertices(resultHandler);
      }
    }

    public static class writeEdgeToFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeEdgeToFile_args, Void> {
      public writeEdgeToFile() {
        super("writeEdgeToFile");
      }

      public writeEdgeToFile_args getEmptyArgsInstance() {
        return new writeEdgeToFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            writeEdgeToFile_result result = new writeEdgeToFile_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeEdgeToFile_result result = new writeEdgeToFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeEdgeToFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.writeEdgeToFile(resultHandler);
      }
    }

    public static class closeConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeConnection_args, Void> {
      public closeConnection() {
        super("closeConnection");
      }

      public closeConnection_args getEmptyArgsInstance() {
        return new closeConnection_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            closeConnection_result result = new closeConnection_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            closeConnection_result result = new closeConnection_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeConnection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.closeConnection(args.messageType,resultHandler);
      }
    }

  }

  public static class edgeReceiver_args implements org.apache.thrift.TBase<edgeReceiver_args, edgeReceiver_args._Fields>, java.io.Serializable, Cloneable, Comparable<edgeReceiver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeReceiver_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("edge", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField EDGE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeColor", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeReceiver_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeReceiver_argsTupleSchemeFactory();

    /**
     *
     * @see MessageType
     */
    public @org.apache.thrift.annotation.Nullable MessageType messageType; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> edge; // required
    public byte edgeColor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       *
       * @see MessageType
       */
      MESSAGE_TYPE((short)1, "messageType"),
      EDGE((short)2, "edge"),
      EDGE_COLOR((short)4, "edgeColor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 2: // EDGE
            return EDGE;
          case 4: // EDGE_COLOR
            return EDGE_COLOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGECOLOR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.EDGE, new org.apache.thrift.meta_data.FieldMetaData("edge", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.EDGE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("edgeColor", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeReceiver_args.class, metaDataMap);
    }

    public edgeReceiver_args() {
    }

    public edgeReceiver_args(
            MessageType messageType,
            java.util.List<java.lang.String> edge,
            byte edgeColor)
    {
      this();
      this.messageType = messageType;
      this.edge = edge;
      this.edgeColor = edgeColor;
      setEdgeColorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeReceiver_args(edgeReceiver_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      if (other.isSetEdge()) {
        java.util.List<java.lang.String> __this__edge = new java.util.ArrayList<java.lang.String>(other.edge);
        this.edge = __this__edge;
      }
      this.edgeColor = other.edgeColor;
    }

    public edgeReceiver_args deepCopy() {
      return new edgeReceiver_args(this);
    }

    @Override
    public void clear() {
      this.messageType = null;
      this.edge = null;
      setEdgeColorIsSet(false);
      this.edgeColor = 0;
    }

    /**
     *
     * @see MessageType
     */
    @org.apache.thrift.annotation.Nullable
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     *
     * @see MessageType
     */
    public edgeReceiver_args setMessageType(@org.apache.thrift.annotation.Nullable MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public int getEdgeSize() {
      return (this.edge == null) ? 0 : this.edge.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getEdgeIterator() {
      return (this.edge == null) ? null : this.edge.iterator();
    }

    public void addToEdge(java.lang.String elem) {
      if (this.edge == null) {
        this.edge = new java.util.ArrayList<java.lang.String>();
      }
      this.edge.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getEdge() {
      return this.edge;
    }

    public edgeReceiver_args setEdge(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> edge) {
      this.edge = edge;
      return this;
    }

    public void unsetEdge() {
      this.edge = null;
    }

    /** Returns true if field edge is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge() {
      return this.edge != null;
    }

    public void setEdgeIsSet(boolean value) {
      if (!value) {
        this.edge = null;
      }
    }

    public byte getEdgeColor() {
      return this.edgeColor;
    }

    public edgeReceiver_args setEdgeColor(byte edgeColor) {
      this.edgeColor = edgeColor;
      setEdgeColorIsSet(true);
      return this;
    }

    public void unsetEdgeColor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGECOLOR_ISSET_ID);
    }

    /** Returns true if field edgeColor is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeColor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGECOLOR_ISSET_ID);
    }

    public void setEdgeColorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGECOLOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case MESSAGE_TYPE:
          if (value == null) {
            unsetMessageType();
          } else {
            setMessageType((MessageType)value);
          }
          break;

        case EDGE:
          if (value == null) {
            unsetEdge();
          } else {
            setEdge((java.util.List<java.lang.String>)value);
          }
          break;

        case EDGE_COLOR:
          if (value == null) {
            unsetEdgeColor();
          } else {
            setEdgeColor((java.lang.Byte)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE_TYPE:
          return getMessageType();

        case EDGE:
          return getEdge();

        case EDGE_COLOR:
          return getEdgeColor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE_TYPE:
          return isSetMessageType();
        case EDGE:
          return isSetEdge();
        case EDGE_COLOR:
          return isSetEdgeColor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeReceiver_args)
        return this.equals((edgeReceiver_args)that);
      return false;
    }

    public boolean equals(edgeReceiver_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_edge = true && this.isSetEdge();
      boolean that_present_edge = true && that.isSetEdge();
      if (this_present_edge || that_present_edge) {
        if (!(this_present_edge && that_present_edge))
          return false;
        if (!this.edge.equals(that.edge))
          return false;
      }

      boolean this_present_edgeColor = true;
      boolean that_present_edgeColor = true;
      if (this_present_edgeColor || that_present_edgeColor) {
        if (!(this_present_edgeColor && that_present_edgeColor))
          return false;
        if (this.edgeColor != that.edgeColor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageType()) ? 131071 : 524287);
      if (isSetMessageType())
        hashCode = hashCode * 8191 + messageType.getValue();

      hashCode = hashCode * 8191 + ((isSetEdge()) ? 131071 : 524287);
      if (isSetEdge())
        hashCode = hashCode * 8191 + edge.hashCode();

      hashCode = hashCode * 8191 + (int) (edgeColor);

      return hashCode;
    }

    @Override
    public int compareTo(edgeReceiver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEdge()).compareTo(other.isSetEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edge, other.edge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEdgeColor()).compareTo(other.isSetEdgeColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeColor, other.edgeColor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeReceiver_args(");
      boolean first = true;

      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edge:");
      if (this.edge == null) {
        sb.append("null");
      } else {
        sb.append(this.edge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeColor:");
      sb.append(this.edgeColor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeReceiver_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeReceiver_argsStandardScheme getScheme() {
        return new edgeReceiver_argsStandardScheme();
      }
    }

    private static class edgeReceiver_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeReceiver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.edge = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.edge.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEdgeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EDGE_COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.edgeColor = iprot.readByte();
                struct.setEdgeColorIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeReceiver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.edge != null) {
          oprot.writeFieldBegin(EDGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.edge.size()));
            for (java.lang.String _iter3 : struct.edge)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EDGE_COLOR_FIELD_DESC);
        oprot.writeByte(struct.edgeColor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeReceiver_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeReceiver_argsTupleScheme getScheme() {
        return new edgeReceiver_argsTupleScheme();
      }
    }

    private static class edgeReceiver_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeReceiver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessageType()) {
          optionals.set(0);
        }
        if (struct.isSetEdge()) {
          optionals.set(1);
        }
        if (struct.isSetEdgeColor()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetEdge()) {
          {
            oprot.writeI32(struct.edge.size());
            for (java.lang.String _iter4 : struct.edge)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetEdgeColor()) {
          oprot.writeByte(struct.edgeColor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.edge = new java.util.ArrayList<java.lang.String>(_list5.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.edge.add(_elem6);
            }
          }
          struct.setEdgeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.edgeColor = iprot.readByte();
          struct.setEdgeColorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class edgeReceiver_result implements org.apache.thrift.TBase<edgeReceiver_result, edgeReceiver_result._Fields>, java.io.Serializable, Cloneable, Comparable<edgeReceiver_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("edgeReceiver_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new edgeReceiver_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new edgeReceiver_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(edgeReceiver_result.class, metaDataMap);
    }

    public edgeReceiver_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public edgeReceiver_result(edgeReceiver_result other) {
    }

    public edgeReceiver_result deepCopy() {
      return new edgeReceiver_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof edgeReceiver_result)
        return this.equals((edgeReceiver_result)that);
      return false;
    }

    public boolean equals(edgeReceiver_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(edgeReceiver_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("edgeReceiver_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class edgeReceiver_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeReceiver_resultStandardScheme getScheme() {
        return new edgeReceiver_resultStandardScheme();
      }
    }

    private static class edgeReceiver_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<edgeReceiver_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, edgeReceiver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, edgeReceiver_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class edgeReceiver_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public edgeReceiver_resultTupleScheme getScheme() {
        return new edgeReceiver_resultTupleScheme();
      }
    }

    private static class edgeReceiver_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<edgeReceiver_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, edgeReceiver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, edgeReceiver_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class singleEdgeReceiver_args implements org.apache.thrift.TBase<singleEdgeReceiver_args, singleEdgeReceiver_args._Fields>, java.io.Serializable, Cloneable, Comparable<singleEdgeReceiver_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("singleEdgeReceiver_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField EDGE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeColor", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new singleEdgeReceiver_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new singleEdgeReceiver_argsTupleSchemeFactory();

    /**
     *
     * @see MessageType
     */
    public @org.apache.thrift.annotation.Nullable MessageType messageType; // required
    public long v1; // required
    public long v2; // required
    public byte edgeColor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       *
       * @see MessageType
       */
      MESSAGE_TYPE((short)1, "messageType"),
      V1((short)2, "v1"),
      V2((short)3, "v2"),
      EDGE_COLOR((short)4, "edgeColor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 2: // V1
            return V1;
          case 3: // V2
            return V2;
          case 4: // EDGE_COLOR
            return EDGE_COLOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __V1_ISSET_ID = 0;
    private static final int __V2_ISSET_ID = 1;
    private static final int __EDGECOLOR_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EDGE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("edgeColor", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(singleEdgeReceiver_args.class, metaDataMap);
    }

    public singleEdgeReceiver_args() {
    }

    public singleEdgeReceiver_args(
            MessageType messageType,
            long v1,
            long v2,
            byte edgeColor)
    {
      this();
      this.messageType = messageType;
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
      this.edgeColor = edgeColor;
      setEdgeColorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public singleEdgeReceiver_args(singleEdgeReceiver_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.v1 = other.v1;
      this.v2 = other.v2;
      this.edgeColor = other.edgeColor;
    }

    public singleEdgeReceiver_args deepCopy() {
      return new singleEdgeReceiver_args(this);
    }

    @Override
    public void clear() {
      this.messageType = null;
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
      setEdgeColorIsSet(false);
      this.edgeColor = 0;
    }

    /**
     *
     * @see MessageType
     */
    @org.apache.thrift.annotation.Nullable
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     *
     * @see MessageType
     */
    public singleEdgeReceiver_args setMessageType(@org.apache.thrift.annotation.Nullable MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getV1() {
      return this.v1;
    }

    public singleEdgeReceiver_args setV1(long v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public long getV2() {
      return this.v2;
    }

    public singleEdgeReceiver_args setV2(long v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public byte getEdgeColor() {
      return this.edgeColor;
    }

    public singleEdgeReceiver_args setEdgeColor(byte edgeColor) {
      this.edgeColor = edgeColor;
      setEdgeColorIsSet(true);
      return this;
    }

    public void unsetEdgeColor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGECOLOR_ISSET_ID);
    }

    /** Returns true if field edgeColor is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeColor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGECOLOR_ISSET_ID);
    }

    public void setEdgeColorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGECOLOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case MESSAGE_TYPE:
          if (value == null) {
            unsetMessageType();
          } else {
            setMessageType((MessageType)value);
          }
          break;

        case V1:
          if (value == null) {
            unsetV1();
          } else {
            setV1((java.lang.Long)value);
          }
          break;

        case V2:
          if (value == null) {
            unsetV2();
          } else {
            setV2((java.lang.Long)value);
          }
          break;

        case EDGE_COLOR:
          if (value == null) {
            unsetEdgeColor();
          } else {
            setEdgeColor((java.lang.Byte)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE_TYPE:
          return getMessageType();

        case V1:
          return getV1();

        case V2:
          return getV2();

        case EDGE_COLOR:
          return getEdgeColor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE_TYPE:
          return isSetMessageType();
        case V1:
          return isSetV1();
        case V2:
          return isSetV2();
        case EDGE_COLOR:
          return isSetEdgeColor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof singleEdgeReceiver_args)
        return this.equals((singleEdgeReceiver_args)that);
      return false;
    }

    public boolean equals(singleEdgeReceiver_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      boolean this_present_edgeColor = true;
      boolean that_present_edgeColor = true;
      if (this_present_edgeColor || that_present_edgeColor) {
        if (!(this_present_edgeColor && that_present_edgeColor))
          return false;
        if (this.edgeColor != that.edgeColor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageType()) ? 131071 : 524287);
      if (isSetMessageType())
        hashCode = hashCode * 8191 + messageType.getValue();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v1);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v2);

      hashCode = hashCode * 8191 + (int) (edgeColor);

      return hashCode;
    }

    @Override
    public int compareTo(singleEdgeReceiver_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEdgeColor()).compareTo(other.isSetEdgeColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeColor, other.edgeColor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("singleEdgeReceiver_args(");
      boolean first = true;

      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeColor:");
      sb.append(this.edgeColor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class singleEdgeReceiver_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public singleEdgeReceiver_argsStandardScheme getScheme() {
        return new singleEdgeReceiver_argsStandardScheme();
      }
    }

    private static class singleEdgeReceiver_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<singleEdgeReceiver_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, singleEdgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v1 = iprot.readI64();
                struct.setV1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v2 = iprot.readI64();
                struct.setV2IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EDGE_COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.edgeColor = iprot.readByte();
                struct.setEdgeColorIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, singleEdgeReceiver_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI64(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI64(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EDGE_COLOR_FIELD_DESC);
        oprot.writeByte(struct.edgeColor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class singleEdgeReceiver_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public singleEdgeReceiver_argsTupleScheme getScheme() {
        return new singleEdgeReceiver_argsTupleScheme();
      }
    }

    private static class singleEdgeReceiver_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<singleEdgeReceiver_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, singleEdgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessageType()) {
          optionals.set(0);
        }
        if (struct.isSetV1()) {
          optionals.set(1);
        }
        if (struct.isSetV2()) {
          optionals.set(2);
        }
        if (struct.isSetEdgeColor()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetV1()) {
          oprot.writeI64(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI64(struct.v2);
        }
        if (struct.isSetEdgeColor()) {
          oprot.writeByte(struct.edgeColor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, singleEdgeReceiver_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.v1 = iprot.readI64();
          struct.setV1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.v2 = iprot.readI64();
          struct.setV2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.edgeColor = iprot.readByte();
          struct.setEdgeColorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class specialVertices_args implements org.apache.thrift.TBase<specialVertices_args, specialVertices_args._Fields>, java.io.Serializable, Cloneable, Comparable<specialVertices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("specialVertices_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField AVG_DEGREE_FIELD_DESC = new org.apache.thrift.protocol.TField("avgDegree", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField V1_FIELD_DESC = new org.apache.thrift.protocol.TField("v1", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField V2_FIELD_DESC = new org.apache.thrift.protocol.TField("v2", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new specialVertices_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new specialVertices_argsTupleSchemeFactory();

    /**
     *
     * @see MessageType
     */
    public @org.apache.thrift.annotation.Nullable MessageType messageType; // required
    public int avgDegree; // required
    public long v1; // required
    public long v2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       *
       * @see MessageType
       */
      MESSAGE_TYPE((short)1, "messageType"),
      AVG_DEGREE((short)2, "avgDegree"),
      V1((short)3, "v1"),
      V2((short)4, "v2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 2: // AVG_DEGREE
            return AVG_DEGREE;
          case 3: // V1
            return V1;
          case 4: // V2
            return V2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AVGDEGREE_ISSET_ID = 0;
    private static final int __V1_ISSET_ID = 1;
    private static final int __V2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.AVG_DEGREE, new org.apache.thrift.meta_data.FieldMetaData("avgDegree", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.V1, new org.apache.thrift.meta_data.FieldMetaData("v1", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.V2, new org.apache.thrift.meta_data.FieldMetaData("v2", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(specialVertices_args.class, metaDataMap);
    }

    public specialVertices_args() {
    }

    public specialVertices_args(
            MessageType messageType,
            int avgDegree,
            long v1,
            long v2)
    {
      this();
      this.messageType = messageType;
      this.avgDegree = avgDegree;
      setAvgDegreeIsSet(true);
      this.v1 = v1;
      setV1IsSet(true);
      this.v2 = v2;
      setV2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public specialVertices_args(specialVertices_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.avgDegree = other.avgDegree;
      this.v1 = other.v1;
      this.v2 = other.v2;
    }

    public specialVertices_args deepCopy() {
      return new specialVertices_args(this);
    }

    @Override
    public void clear() {
      this.messageType = null;
      setAvgDegreeIsSet(false);
      this.avgDegree = 0;
      setV1IsSet(false);
      this.v1 = 0;
      setV2IsSet(false);
      this.v2 = 0;
    }

    /**
     *
     * @see MessageType
     */
    @org.apache.thrift.annotation.Nullable
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     *
     * @see MessageType
     */
    public specialVertices_args setMessageType(@org.apache.thrift.annotation.Nullable MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public int getAvgDegree() {
      return this.avgDegree;
    }

    public specialVertices_args setAvgDegree(int avgDegree) {
      this.avgDegree = avgDegree;
      setAvgDegreeIsSet(true);
      return this;
    }

    public void unsetAvgDegree() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVGDEGREE_ISSET_ID);
    }

    /** Returns true if field avgDegree is set (has been assigned a value) and false otherwise */
    public boolean isSetAvgDegree() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVGDEGREE_ISSET_ID);
    }

    public void setAvgDegreeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVGDEGREE_ISSET_ID, value);
    }

    public long getV1() {
      return this.v1;
    }

    public specialVertices_args setV1(long v1) {
      this.v1 = v1;
      setV1IsSet(true);
      return this;
    }

    public void unsetV1() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V1_ISSET_ID);
    }

    /** Returns true if field v1 is set (has been assigned a value) and false otherwise */
    public boolean isSetV1() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V1_ISSET_ID);
    }

    public void setV1IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V1_ISSET_ID, value);
    }

    public long getV2() {
      return this.v2;
    }

    public specialVertices_args setV2(long v2) {
      this.v2 = v2;
      setV2IsSet(true);
      return this;
    }

    public void unsetV2() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __V2_ISSET_ID);
    }

    /** Returns true if field v2 is set (has been assigned a value) and false otherwise */
    public boolean isSetV2() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __V2_ISSET_ID);
    }

    public void setV2IsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __V2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case MESSAGE_TYPE:
          if (value == null) {
            unsetMessageType();
          } else {
            setMessageType((MessageType)value);
          }
          break;

        case AVG_DEGREE:
          if (value == null) {
            unsetAvgDegree();
          } else {
            setAvgDegree((java.lang.Integer)value);
          }
          break;

        case V1:
          if (value == null) {
            unsetV1();
          } else {
            setV1((java.lang.Long)value);
          }
          break;

        case V2:
          if (value == null) {
            unsetV2();
          } else {
            setV2((java.lang.Long)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE_TYPE:
          return getMessageType();

        case AVG_DEGREE:
          return getAvgDegree();

        case V1:
          return getV1();

        case V2:
          return getV2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE_TYPE:
          return isSetMessageType();
        case AVG_DEGREE:
          return isSetAvgDegree();
        case V1:
          return isSetV1();
        case V2:
          return isSetV2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof specialVertices_args)
        return this.equals((specialVertices_args)that);
      return false;
    }

    public boolean equals(specialVertices_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_avgDegree = true;
      boolean that_present_avgDegree = true;
      if (this_present_avgDegree || that_present_avgDegree) {
        if (!(this_present_avgDegree && that_present_avgDegree))
          return false;
        if (this.avgDegree != that.avgDegree)
          return false;
      }

      boolean this_present_v1 = true;
      boolean that_present_v1 = true;
      if (this_present_v1 || that_present_v1) {
        if (!(this_present_v1 && that_present_v1))
          return false;
        if (this.v1 != that.v1)
          return false;
      }

      boolean this_present_v2 = true;
      boolean that_present_v2 = true;
      if (this_present_v2 || that_present_v2) {
        if (!(this_present_v2 && that_present_v2))
          return false;
        if (this.v2 != that.v2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageType()) ? 131071 : 524287);
      if (isSetMessageType())
        hashCode = hashCode * 8191 + messageType.getValue();

      hashCode = hashCode * 8191 + avgDegree;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v1);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(v2);

      return hashCode;
    }

    @Override
    public int compareTo(specialVertices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAvgDegree()).compareTo(other.isSetAvgDegree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvgDegree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgDegree, other.avgDegree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetV1()).compareTo(other.isSetV1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v1, other.v1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetV2()).compareTo(other.isSetV2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetV2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.v2, other.v2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("specialVertices_args(");
      boolean first = true;

      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("avgDegree:");
      sb.append(this.avgDegree);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v1:");
      sb.append(this.v1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("v2:");
      sb.append(this.v2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class specialVertices_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public specialVertices_argsStandardScheme getScheme() {
        return new specialVertices_argsStandardScheme();
      }
    }

    private static class specialVertices_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<specialVertices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, specialVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AVG_DEGREE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.avgDegree = iprot.readI32();
                struct.setAvgDegreeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // V1
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v1 = iprot.readI64();
                struct.setV1IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // V2
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.v2 = iprot.readI64();
                struct.setV2IsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, specialVertices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AVG_DEGREE_FIELD_DESC);
        oprot.writeI32(struct.avgDegree);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V1_FIELD_DESC);
        oprot.writeI64(struct.v1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(V2_FIELD_DESC);
        oprot.writeI64(struct.v2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class specialVertices_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public specialVertices_argsTupleScheme getScheme() {
        return new specialVertices_argsTupleScheme();
      }
    }

    private static class specialVertices_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<specialVertices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, specialVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessageType()) {
          optionals.set(0);
        }
        if (struct.isSetAvgDegree()) {
          optionals.set(1);
        }
        if (struct.isSetV1()) {
          optionals.set(2);
        }
        if (struct.isSetV2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetAvgDegree()) {
          oprot.writeI32(struct.avgDegree);
        }
        if (struct.isSetV1()) {
          oprot.writeI64(struct.v1);
        }
        if (struct.isSetV2()) {
          oprot.writeI64(struct.v2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, specialVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.avgDegree = iprot.readI32();
          struct.setAvgDegreeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.v1 = iprot.readI64();
          struct.setV1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.v2 = iprot.readI64();
          struct.setV2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class specialVertices_result implements org.apache.thrift.TBase<specialVertices_result, specialVertices_result._Fields>, java.io.Serializable, Cloneable, Comparable<specialVertices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("specialVertices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new specialVertices_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new specialVertices_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(specialVertices_result.class, metaDataMap);
    }

    public specialVertices_result() {
    }

    public specialVertices_result(
            java.util.Map<java.lang.String,java.nio.ByteBuffer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public specialVertices_result(specialVertices_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.success);
        this.success = __this__success;
      }
    }

    public specialVertices_result deepCopy() {
      return new specialVertices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.nio.ByteBuffer val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getSuccess() {
      return this.success;
    }

    public specialVertices_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof specialVertices_result)
        return this.equals((specialVertices_result)that);
      return false;
    }

    public boolean equals(specialVertices_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(specialVertices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("specialVertices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class specialVertices_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public specialVertices_resultStandardScheme getScheme() {
        return new specialVertices_resultStandardScheme();
      }
    }

    private static class specialVertices_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<specialVertices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, specialVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key9;
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readBinary();
                    struct.success.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, specialVertices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter12 : struct.success.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeBinary(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class specialVertices_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public specialVertices_resultTupleScheme getScheme() {
        return new specialVertices_resultTupleScheme();
      }
    }

    private static class specialVertices_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<specialVertices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, specialVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter13 : struct.success.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeBinary(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, specialVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map14.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key15;
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = iprot.readString();
              _val16 = iprot.readBinary();
              struct.success.put(_key15, _val16);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cleanRedVertices_args implements org.apache.thrift.TBase<cleanRedVertices_args, cleanRedVertices_args._Fields>, java.io.Serializable, Cloneable, Comparable<cleanRedVertices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cleanRedVertices_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cleanRedVertices_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cleanRedVertices_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cleanRedVertices_args.class, metaDataMap);
    }

    public cleanRedVertices_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cleanRedVertices_args(cleanRedVertices_args other) {
    }

    public cleanRedVertices_args deepCopy() {
      return new cleanRedVertices_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cleanRedVertices_args)
        return this.equals((cleanRedVertices_args)that);
      return false;
    }

    public boolean equals(cleanRedVertices_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(cleanRedVertices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cleanRedVertices_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cleanRedVertices_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRedVertices_argsStandardScheme getScheme() {
        return new cleanRedVertices_argsStandardScheme();
      }
    }

    private static class cleanRedVertices_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cleanRedVertices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cleanRedVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cleanRedVertices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cleanRedVertices_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRedVertices_argsTupleScheme getScheme() {
        return new cleanRedVertices_argsTupleScheme();
      }
    }

    private static class cleanRedVertices_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cleanRedVertices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cleanRedVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cleanRedVertices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cleanRedVertices_result implements org.apache.thrift.TBase<cleanRedVertices_result, cleanRedVertices_result._Fields>, java.io.Serializable, Cloneable, Comparable<cleanRedVertices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cleanRedVertices_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cleanRedVertices_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cleanRedVertices_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cleanRedVertices_result.class, metaDataMap);
    }

    public cleanRedVertices_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cleanRedVertices_result(cleanRedVertices_result other) {
    }

    public cleanRedVertices_result deepCopy() {
      return new cleanRedVertices_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cleanRedVertices_result)
        return this.equals((cleanRedVertices_result)that);
      return false;
    }

    public boolean equals(cleanRedVertices_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(cleanRedVertices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cleanRedVertices_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cleanRedVertices_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRedVertices_resultStandardScheme getScheme() {
        return new cleanRedVertices_resultStandardScheme();
      }
    }

    private static class cleanRedVertices_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cleanRedVertices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cleanRedVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cleanRedVertices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cleanRedVertices_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cleanRedVertices_resultTupleScheme getScheme() {
        return new cleanRedVertices_resultTupleScheme();
      }
    }

    private static class cleanRedVertices_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cleanRedVertices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cleanRedVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cleanRedVertices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeEdgeToFile_args implements org.apache.thrift.TBase<writeEdgeToFile_args, writeEdgeToFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeEdgeToFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeEdgeToFile_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeEdgeToFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeEdgeToFile_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeEdgeToFile_args.class, metaDataMap);
    }

    public writeEdgeToFile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeEdgeToFile_args(writeEdgeToFile_args other) {
    }

    public writeEdgeToFile_args deepCopy() {
      return new writeEdgeToFile_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeEdgeToFile_args)
        return this.equals((writeEdgeToFile_args)that);
      return false;
    }

    public boolean equals(writeEdgeToFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(writeEdgeToFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeEdgeToFile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeEdgeToFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeEdgeToFile_argsStandardScheme getScheme() {
        return new writeEdgeToFile_argsStandardScheme();
      }
    }

    private static class writeEdgeToFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeEdgeToFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeEdgeToFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeEdgeToFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeEdgeToFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeEdgeToFile_argsTupleScheme getScheme() {
        return new writeEdgeToFile_argsTupleScheme();
      }
    }

    private static class writeEdgeToFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeEdgeToFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeEdgeToFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeEdgeToFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeEdgeToFile_result implements org.apache.thrift.TBase<writeEdgeToFile_result, writeEdgeToFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeEdgeToFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeEdgeToFile_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeEdgeToFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeEdgeToFile_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeEdgeToFile_result.class, metaDataMap);
    }

    public writeEdgeToFile_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeEdgeToFile_result(writeEdgeToFile_result other) {
    }

    public writeEdgeToFile_result deepCopy() {
      return new writeEdgeToFile_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeEdgeToFile_result)
        return this.equals((writeEdgeToFile_result)that);
      return false;
    }

    public boolean equals(writeEdgeToFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(writeEdgeToFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeEdgeToFile_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeEdgeToFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeEdgeToFile_resultStandardScheme getScheme() {
        return new writeEdgeToFile_resultStandardScheme();
      }
    }

    private static class writeEdgeToFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeEdgeToFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeEdgeToFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeEdgeToFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeEdgeToFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeEdgeToFile_resultTupleScheme getScheme() {
        return new writeEdgeToFile_resultTupleScheme();
      }
    }

    private static class writeEdgeToFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeEdgeToFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeEdgeToFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeEdgeToFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class closeConnection_args implements org.apache.thrift.TBase<closeConnection_args, closeConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeConnection_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new closeConnection_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new closeConnection_argsTupleSchemeFactory();

    /**
     *
     * @see MessageType
     */
    public @org.apache.thrift.annotation.Nullable MessageType messageType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       *
       * @see MessageType
       */
      MESSAGE_TYPE((short)1, "messageType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeConnection_args.class, metaDataMap);
    }

    public closeConnection_args() {
    }

    public closeConnection_args(
            MessageType messageType)
    {
      this();
      this.messageType = messageType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeConnection_args(closeConnection_args other) {
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
    }

    public closeConnection_args deepCopy() {
      return new closeConnection_args(this);
    }

    @Override
    public void clear() {
      this.messageType = null;
    }

    /**
     *
     * @see MessageType
     */
    @org.apache.thrift.annotation.Nullable
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     *
     * @see MessageType
     */
    public closeConnection_args setMessageType(@org.apache.thrift.annotation.Nullable MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case MESSAGE_TYPE:
          if (value == null) {
            unsetMessageType();
          } else {
            setMessageType((MessageType)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case MESSAGE_TYPE:
          return getMessageType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case MESSAGE_TYPE:
          return isSetMessageType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof closeConnection_args)
        return this.equals((closeConnection_args)that);
      return false;
    }

    public boolean equals(closeConnection_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMessageType()) ? 131071 : 524287);
      if (isSetMessageType())
        hashCode = hashCode * 8191 + messageType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(closeConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("closeConnection_args(");
      boolean first = true;

      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeConnection_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public closeConnection_argsStandardScheme getScheme() {
        return new closeConnection_argsStandardScheme();
      }
    }

    private static class closeConnection_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<closeConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeConnection_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public closeConnection_argsTupleScheme getScheme() {
        return new closeConnection_argsTupleScheme();
      }
    }

    private static class closeConnection_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<closeConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMessageType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.messageType = in.dreamlab.MultiThreadedPartitioning.thrift.MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class closeConnection_result implements org.apache.thrift.TBase<closeConnection_result, closeConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeConnection_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new closeConnection_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new closeConnection_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeConnection_result.class, metaDataMap);
    }

    public closeConnection_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeConnection_result(closeConnection_result other) {
    }

    public closeConnection_result deepCopy() {
      return new closeConnection_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof closeConnection_result)
        return this.equals((closeConnection_result)that);
      return false;
    }

    public boolean equals(closeConnection_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(closeConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("closeConnection_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeConnection_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public closeConnection_resultStandardScheme getScheme() {
        return new closeConnection_resultStandardScheme();
      }
    }

    private static class closeConnection_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<closeConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeConnection_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public closeConnection_resultTupleScheme getScheme() {
        return new closeConnection_resultTupleScheme();
      }
    }

    private static class closeConnection_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<closeConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
